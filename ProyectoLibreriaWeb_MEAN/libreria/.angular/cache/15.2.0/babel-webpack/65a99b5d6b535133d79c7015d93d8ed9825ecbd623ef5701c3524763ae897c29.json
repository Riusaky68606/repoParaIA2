{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UsuarioService } from 'src/app/services/usuario.service';\nimport { TransaccionService } from 'src/app/services/transaccion.service';\nimport { Transaccion } from 'src/app/models/transaccion';\nlet TransaccionComponent = class TransaccionComponent {\n  constructor(_usuarioService, _transaccionService, _accountService, _router, _route) {\n    this._usuarioService = _usuarioService;\n    this._transaccionService = _transaccionService;\n    this._accountService = _accountService;\n    this._router = _router;\n    this._route = _route;\n    this.connected = false;\n    this.titulo = \"Transferir\";\n    this.connected = false;\n    this.messages = null;\n    this.user = null;\n    this.id = null;\n    this.cuentas = [];\n    this.transaccion = new Transaccion('', '', 0, new Date(), 'Transferencia');\n    this.transaccionGuardar = new Transaccion('', '', 0, new Date(), 'Transferencia');\n    this.idGuardado = '';\n    this.cuentaValida = false;\n    this._usuarioService.loggedIn.subscribe(resp => {\n      if (resp == true) {\n        this.connected = true;\n      }\n    });\n    this._usuarioService.user.subscribe(resp => {\n      if (resp != '') {\n        this.user = resp;\n      }\n    });\n    this._usuarioService.id.subscribe(resp => {\n      if (resp != '') {\n        this.id = resp;\n        this.getCuentasUsuario(this.id);\n      }\n    });\n  }\n  ngOnInit() {}\n  doTransaccion(form) {\n    this._transaccionService.doTransaccion(this.transaccion).subscribe(response => {\n      console.log(response);\n    }, error => {\n      console.log(error);\n    });\n  }\n  getCuentasUsuario(user_id) {\n    this._accountService.getCuentasUsuario(user_id).subscribe(response => {\n      if (response.result) {\n        this.cuentas = response.result;\n      } else {\n        console.log(\"Error al recuperar los datos de sus cuentas\");\n      }\n    }, error => {\n      console.log(error);\n      //this.messages={message:'No se ha podido registrar la account',status:'failed'};;\n    });\n  }\n\n  validarCuenta() {\n    var cuen = this.transaccion.cuenta_receptor.toString();\n    this._accountService.validarCuenta(cuen).subscribe(response => {\n      if (response.result) {\n        //this.cuentas=response.result;\n        //console.log(response.result);\n        this.cuentaValida = true;\n      } else {\n        console.log(\"Error al recuperar los datos de sus cuentas\");\n        this.cuentaValida = false;\n      }\n    }, error => {\n      console.log(error);\n      this.cuentaValida = false;\n      //this.messages={message:'No se ha podido registrar la account',status:'failed'};;\n    });\n  }\n};\n\nTransaccionComponent = __decorate([Component({\n  selector: 'app-transaccion',\n  templateUrl: './transaccion.component.html',\n  styleUrls: ['./transaccion.component.css'],\n  providers: [UsuarioService, TransaccionService]\n})], TransaccionComponent);\nexport { TransaccionComponent };","map":{"version":3,"mappings":"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","names":["Component","UsuarioService","TransaccionService","Transaccion","TransaccionComponent","constructor","_usuarioService","_transaccionService","_accountService","_router","_route","titulo","connected","messages","user","id","cuentas","transaccion","Date","transaccionGuardar","idGuardado","cuentaValida","loggedIn","subscribe","resp","getCuentasUsuario","ngOnInit","doTransaccion","form","response","console","log","error","user_id","result","validarCuenta","cuen","cuenta_receptor","toString","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["D:\\Poli_sexto\\Ingenieria de Software\\Proyecto Ing.Software II\\nuevojerson\\ProyectoLibreriaWeb_MEAN\\libreria\\src\\app\\components\\transaccion\\transaccion.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { UsuarioService } from 'src/app/services/usuario.service';\r\nimport { CuentaService } from 'src/app/services/cuenta.service';\r\nimport { TransaccionService } from 'src/app/services/transaccion.service';\r\nimport { Cuenta } from 'src/app/models/cuenta';\r\nimport { Transaccion } from 'src/app/models/transaccion';\r\nimport { Global } from 'src/app/services/global';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-transaccion',\r\n  templateUrl: './transaccion.component.html',\r\n  styleUrls: ['./transaccion.component.css'],\r\n  providers: [UsuarioService,TransaccionService]\r\n})\r\nexport class TransaccionComponent {\r\n  public titulo:string;\r\n  public connected=false;\r\n  public messages:any;\r\n  public user:any;\r\n  public id:any;\r\n\r\n  public transaccion:Transaccion;\r\n  public transaccionGuardar:Transaccion;\r\n  public idGuardado:String;\r\n\r\n  public cuentas:Cuenta[];\r\n  public cuentaValida:boolean;\r\n\r\n  constructor(\r\n    private _usuarioService:UsuarioService,\r\n    private _transaccionService:TransaccionService,\r\n    private _accountService:CuentaService,\r\n    private _router:Router,\r\n    private _route:ActivatedRoute\r\n  ){\r\n    this.titulo=\"Transferir\";\r\n    this.connected=false;\r\n    this.messages=null;\r\n    this.user=null;\r\n    this.id=null;\r\n    this.cuentas=[];\r\n\r\n    this.transaccion=new Transaccion('','',0,new Date(),'Transferencia');\r\n    this.transaccionGuardar=new Transaccion('','',0,new Date(),'Transferencia');\r\n    this.idGuardado='';\r\n    this.cuentaValida=false;\r\n\r\n    this._usuarioService.loggedIn.subscribe(resp =>{\r\n      if(resp==true){\r\n        this.connected=true;\r\n      }\r\n    });\r\n    this._usuarioService.user.subscribe(resp =>{\r\n      if(resp!=''){\r\n        this.user=resp;\r\n      }\r\n    });\r\n    this._usuarioService.id.subscribe(resp =>{\r\n      if(resp!=''){\r\n        this.id=resp;\r\n        this.getCuentasUsuario(this.id);\r\n      }\r\n    });\r\n    \r\n  }\r\n  ngOnInit(): void {\r\n    \r\n  }\r\n  doTransaccion(form:NgForm){\r\n    this._transaccionService.doTransaccion(this.transaccion).subscribe(\r\n      response=>{\r\n        console.log(response);\r\n      },\r\n      error=>{\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  getCuentasUsuario(user_id:string){\r\n    this._accountService.getCuentasUsuario(user_id).subscribe(\r\n      response=>{\r\n        if(response.result){\r\n          this.cuentas=response.result;\r\n        }else{\r\n          console.log(\"Error al recuperar los datos de sus cuentas\")\r\n        } \r\n      },\r\n      error=>{\r\n        console.log(<any>error);\r\n        //this.messages={message:'No se ha podido registrar la account',status:'failed'};;\r\n      }\r\n    );\r\n  }\r\n  validarCuenta(){\r\n    var cuen=this.transaccion.cuenta_receptor.toString();\r\n    this._accountService.validarCuenta(cuen).subscribe(\r\n      response=>{\r\n        if(response.result){\r\n          //this.cuentas=response.result;\r\n          //console.log(response.result);\r\n          this.cuentaValida=true;\r\n        }else{\r\n          console.log(\"Error al recuperar los datos de sus cuentas\")\r\n          this.cuentaValida=false;\r\n        } \r\n      },\r\n      error=>{\r\n        console.log(<any>error);\r\n        this.cuentaValida=false;\r\n        //this.messages={message:'No se ha podido registrar la account',status:'failed'};;\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}